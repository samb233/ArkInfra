// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InfraServiceClient is the client API for InfraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfraServiceClient interface {
	// 初始化基建方法，用于新玩家初始化基建
	CreateInfra(ctx context.Context, in *User, opts ...grpc.CallOption) (*CreateInfraReply, error)
	// 首页获取基建产出数目、问题数目
	GetInfo(ctx context.Context, in *User, opts ...grpc.CallOption) (*GetInfoReply, error)
	// 基建详情
	GetDetail(ctx context.Context, in *User, opts ...grpc.CallOption) (*GetDetailReply, error)
	// 单个房间详情
	GetRoomDetail(ctx context.Context, in *RoomReq, opts ...grpc.CallOption) (*Room, error)
	// 获取物品
	GetProduction(ctx context.Context, in *GetProductionReq, opts ...grpc.CallOption) (*GetProductionReply, error)
	// 升级建筑
	UpdateRoom(ctx context.Context, in *RoomReq, opts ...grpc.CallOption) (*UpdateRoomReply, error)
	// 更改生产物品
	ChangeProduction(ctx context.Context, in *ChangeProductionReq, opts ...grpc.CallOption) (*Production, error)
	// 更改工作人员
	ChangeWorker(ctx context.Context, in *ChangeWorkerReq, opts ...grpc.CallOption) (*ChangeWorkerReply, error)
}

type infraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInfraServiceClient(cc grpc.ClientConnInterface) InfraServiceClient {
	return &infraServiceClient{cc}
}

func (c *infraServiceClient) CreateInfra(ctx context.Context, in *User, opts ...grpc.CallOption) (*CreateInfraReply, error) {
	out := new(CreateInfraReply)
	err := c.cc.Invoke(ctx, "/arkinfra.v1.InfraService/CreateInfra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraServiceClient) GetInfo(ctx context.Context, in *User, opts ...grpc.CallOption) (*GetInfoReply, error) {
	out := new(GetInfoReply)
	err := c.cc.Invoke(ctx, "/arkinfra.v1.InfraService/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraServiceClient) GetDetail(ctx context.Context, in *User, opts ...grpc.CallOption) (*GetDetailReply, error) {
	out := new(GetDetailReply)
	err := c.cc.Invoke(ctx, "/arkinfra.v1.InfraService/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraServiceClient) GetRoomDetail(ctx context.Context, in *RoomReq, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/arkinfra.v1.InfraService/GetRoomDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraServiceClient) GetProduction(ctx context.Context, in *GetProductionReq, opts ...grpc.CallOption) (*GetProductionReply, error) {
	out := new(GetProductionReply)
	err := c.cc.Invoke(ctx, "/arkinfra.v1.InfraService/GetProduction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraServiceClient) UpdateRoom(ctx context.Context, in *RoomReq, opts ...grpc.CallOption) (*UpdateRoomReply, error) {
	out := new(UpdateRoomReply)
	err := c.cc.Invoke(ctx, "/arkinfra.v1.InfraService/UpdateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraServiceClient) ChangeProduction(ctx context.Context, in *ChangeProductionReq, opts ...grpc.CallOption) (*Production, error) {
	out := new(Production)
	err := c.cc.Invoke(ctx, "/arkinfra.v1.InfraService/ChangeProduction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraServiceClient) ChangeWorker(ctx context.Context, in *ChangeWorkerReq, opts ...grpc.CallOption) (*ChangeWorkerReply, error) {
	out := new(ChangeWorkerReply)
	err := c.cc.Invoke(ctx, "/arkinfra.v1.InfraService/ChangeWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfraServiceServer is the server API for InfraService service.
// All implementations must embed UnimplementedInfraServiceServer
// for forward compatibility
type InfraServiceServer interface {
	// 初始化基建方法，用于新玩家初始化基建
	CreateInfra(context.Context, *User) (*CreateInfraReply, error)
	// 首页获取基建产出数目、问题数目
	GetInfo(context.Context, *User) (*GetInfoReply, error)
	// 基建详情
	GetDetail(context.Context, *User) (*GetDetailReply, error)
	// 单个房间详情
	GetRoomDetail(context.Context, *RoomReq) (*Room, error)
	// 获取物品
	GetProduction(context.Context, *GetProductionReq) (*GetProductionReply, error)
	// 升级建筑
	UpdateRoom(context.Context, *RoomReq) (*UpdateRoomReply, error)
	// 更改生产物品
	ChangeProduction(context.Context, *ChangeProductionReq) (*Production, error)
	// 更改工作人员
	ChangeWorker(context.Context, *ChangeWorkerReq) (*ChangeWorkerReply, error)
	mustEmbedUnimplementedInfraServiceServer()
}

// UnimplementedInfraServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInfraServiceServer struct {
}

func (UnimplementedInfraServiceServer) CreateInfra(context.Context, *User) (*CreateInfraReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInfra not implemented")
}
func (UnimplementedInfraServiceServer) GetInfo(context.Context, *User) (*GetInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedInfraServiceServer) GetDetail(context.Context, *User) (*GetDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedInfraServiceServer) GetRoomDetail(context.Context, *RoomReq) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomDetail not implemented")
}
func (UnimplementedInfraServiceServer) GetProduction(context.Context, *GetProductionReq) (*GetProductionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduction not implemented")
}
func (UnimplementedInfraServiceServer) UpdateRoom(context.Context, *RoomReq) (*UpdateRoomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoom not implemented")
}
func (UnimplementedInfraServiceServer) ChangeProduction(context.Context, *ChangeProductionReq) (*Production, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeProduction not implemented")
}
func (UnimplementedInfraServiceServer) ChangeWorker(context.Context, *ChangeWorkerReq) (*ChangeWorkerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeWorker not implemented")
}
func (UnimplementedInfraServiceServer) mustEmbedUnimplementedInfraServiceServer() {}

// UnsafeInfraServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfraServiceServer will
// result in compilation errors.
type UnsafeInfraServiceServer interface {
	mustEmbedUnimplementedInfraServiceServer()
}

func RegisterInfraServiceServer(s grpc.ServiceRegistrar, srv InfraServiceServer) {
	s.RegisterService(&InfraService_ServiceDesc, srv)
}

func _InfraService_CreateInfra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraServiceServer).CreateInfra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkinfra.v1.InfraService/CreateInfra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraServiceServer).CreateInfra(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkinfra.v1.InfraService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraServiceServer).GetInfo(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraService_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraServiceServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkinfra.v1.InfraService/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraServiceServer).GetDetail(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraService_GetRoomDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraServiceServer).GetRoomDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkinfra.v1.InfraService/GetRoomDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraServiceServer).GetRoomDetail(ctx, req.(*RoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraService_GetProduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraServiceServer).GetProduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkinfra.v1.InfraService/GetProduction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraServiceServer).GetProduction(ctx, req.(*GetProductionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraService_UpdateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraServiceServer).UpdateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkinfra.v1.InfraService/UpdateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraServiceServer).UpdateRoom(ctx, req.(*RoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraService_ChangeProduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeProductionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraServiceServer).ChangeProduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkinfra.v1.InfraService/ChangeProduction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraServiceServer).ChangeProduction(ctx, req.(*ChangeProductionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfraService_ChangeWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeWorkerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraServiceServer).ChangeWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkinfra.v1.InfraService/ChangeWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraServiceServer).ChangeWorker(ctx, req.(*ChangeWorkerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// InfraService_ServiceDesc is the grpc.ServiceDesc for InfraService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfraService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arkinfra.v1.InfraService",
	HandlerType: (*InfraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInfra",
			Handler:    _InfraService_CreateInfra_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _InfraService_GetInfo_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _InfraService_GetDetail_Handler,
		},
		{
			MethodName: "GetRoomDetail",
			Handler:    _InfraService_GetRoomDetail_Handler,
		},
		{
			MethodName: "GetProduction",
			Handler:    _InfraService_GetProduction_Handler,
		},
		{
			MethodName: "UpdateRoom",
			Handler:    _InfraService_UpdateRoom_Handler,
		},
		{
			MethodName: "ChangeProduction",
			Handler:    _InfraService_ChangeProduction_Handler,
		},
		{
			MethodName: "ChangeWorker",
			Handler:    _InfraService_ChangeWorker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arkinfra.proto",
}
